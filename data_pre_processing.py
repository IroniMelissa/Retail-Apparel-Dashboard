# -*- coding: utf-8 -*-
"""Data Pre processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fyI_J14pMz2BmOCxZIg65Bv410LC2Ixy
"""

#Import Libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

#import data as a dataframe

data = pd.read_csv("/content/drive/MyDrive/Cargills/Retail_Apparel_Data_v3 1.csv")

#print first 5 rows in dataframe

data.head()

#print last 5 rows in df

data.tail()

#No fo rows & coulmns in df

data.shape

#check each column data type

data.info()

data.describe()

#check sum of null values in each coulmn

data.isnull().sum()

#check if any duplicate rows in dataset

data.duplicated().sum()

#print duplicated rows

data[data.duplicated()]

#remove duplicate rows

data.drop_duplicates(inplace=True)

data.duplicated().sum()

"""#**Numerical Data Pre-processing**"""

data['Invoice Number'].value_counts()

data['Customer ID'].value_counts()



plt.figure()
sns.boxplot(data=data, x='Total Sales')
plt.show()

np.dtype(data['Price per Unit'])

correlation_ofppu = data['Price per Unit'].corr(data['Total Sales'])
print(f"Correlation between Price per Unit and Total Sales: {correlation_ofppu}")

plt.figure()
sns.boxplot(data=data, x='Price per Unit')
plt.show()

np.dtype(data['Quantity'])

plt.figure()
sns.boxplot(data=data, x='Quantity')
plt.show()

data['Quantity'].value_counts()

# prompt: find record that qunatity is equal to 30

data[data["Quantity"] == 30]

data[data["Quantity"] == 60]

# prompt: check correlation with Quantity coulmn and Total Sales coulmn

correlation = data['Quantity'].corr(data['Total Sales'])
print(f"Correlation between Quantity and Total Sales: {correlation}")

# prompt: calculate 25th , 75th percentiles of Quantity column

q1 = data['Quantity'].quantile(0.25)
q3 = data['Quantity'].quantile(0.75)

print(f"25th percentile of Quantity: {q1}")
print(f"75th percentile of Quantity: {q3}")

IQR = q3 - q1
IQR

lower_limit = q1 -1.5 * IQR
upper_limit = q3 + 1.5 * IQR

lower_limit, upper_limit

#outliers
data[(data.Quantity<lower_limit)|(data.Quantity>upper_limit)]

#remove outliers
data = data[(data.Quantity>lower_limit)&(data.Quantity<upper_limit)]

plt.figure()
sns.boxplot(data=data, x='Quantity')
plt.show()

correlation = data['Quantity'].corr(data['Total Sales'])
print(f"Correlation between Quantity and Total Sales: {correlation}")

"""#**Categorical Data Pre-processing**"""

data['Return Status'].value_counts()

data['Return Status'].value_counts().plot(kind='bar')

plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Return Status')
plt.show()

data['Sales Channel'].value_counts()

data['Sales Channel'].value_counts().plot(kind ='bar')

#

data['Sales Channel'] = data['Sales Channel'].replace('On line', 'Online')

data['Sales Channel'] = data['Sales Channel'].replace('In Store', 'In-Store')

data['Sales Channel'].value_counts()

data['Sales Channel'].value_counts().plot(kind ='bar')

plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Sales Channel')
plt.show()

data['Customer Age Group'].value_counts()

# prompt: check null values in  coulmn Customer Age Group

data['Customer Age Group'].isnull().sum()

# prompt: show 5 records that Customer Age Group is null

data[data['Customer Age Group'].isnull()].head()

data['Customer Age Group'].value_counts().plot(kind='bar')

plt.figure(figsize=(5,5))
sns.histplot(data=data, x='Customer Age Group')
plt.show()

# prompt: replace null values in Customer Age Group with most commo value

data['Customer Age Group'].fillna(data['Customer Age Group'].mode()[0], inplace=True)

data[data["Invoice Number"] == 10259]

data['Customer Age Group'].value_counts().plot(kind='bar')

# before handling  null
plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Customer Age Group')
plt.show()

#after handling null
plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Customer Age Group')
plt.show()

data['Region'].value_counts()

data['Region'].value_counts().plot(kind='bar')

plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Region')
plt.show()

data['Product Category'].value_counts()

"""Accessories    3472+Acessories      131
footwear

"""

data['Product Category'].value_counts().plot(kind='bar')

data['Product Category'] = data['Product Category'].replace('Acessories', 'Accessories')

data['Product Category'] = data['Product Category'].replace('Foot wear', 'Footwear')

data['Product Category'].value_counts()

data['Product Category'].value_counts().plot(kind='bar')

plt.figure()
sns.boxplot(data=data, x ='Total Sales', y='Product Category')
plt.show()

#DateTime

# prompt: in Date Time coulmn remove time part after space in between Date Time value

data['Date Time'] = data['Date Time'].apply(lambda x: x.split()[0])

data.head()

# check all cleaned data once
data.head()

data.head(25)

data.shape

from google.colab import files

#download a csv file of data

data.to_csv('data.csv')

files.download('data.csv')